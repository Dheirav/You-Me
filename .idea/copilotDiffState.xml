<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.compose)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.youme&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.youme&quot;&#10;        minSdk = 33&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.3&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:32.5.0&quot;))&#10;    implementation(&quot;com.google.firebase:firebase-analytics-ktx&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth-ktx&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-firestore-ktx:24.10.3&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2&quot;)&#10;    implementation(&quot;androidx.compose.runtime:runtime-livedata:1.5.1&quot;)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.compose)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.youme&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.youme&quot;&#10;        minSdk = 33&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.3&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:32.5.0&quot;))&#10;    implementation(&quot;com.google.firebase:firebase-analytics-ktx&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth-ktx&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-firestore-ktx:24.10.3&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2&quot;)&#10;    implementation(&quot;androidx.compose.runtime:runtime-livedata:1.5.1&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.YouMe&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.YouMe&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.YouMeApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.YouMe&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.YouMe&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/MainActivity.kt" />
              <option name="originalContent" value="package com.example.youme&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.viewModels&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.youme.ui.auth.AuthScreen&#10;import com.example.youme.ui.auth.AuthViewModel&#10;import com.example.youme.ui.auth.CoupleLinkScreen&#10;import com.example.youme.ui.auth.EmailVerificationScreen&#10;import com.google.firebase.auth.FirebaseAuth&#10;import androidx.compose.runtime.LaunchedEffect&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            val navController = rememberNavController()&#10;            val context = this&#10;            var isAuthenticated by remember {&#10;                mutableStateOf(FirebaseAuth.getInstance().currentUser != null)&#10;            }&#10;            val authViewModel: AuthViewModel by viewModels()&#10;            // On app start, sign out if not remembered&#10;            LaunchedEffect(Unit) {&#10;                if (isAuthenticated &amp;&amp; !authViewModel.checkRememberMe(context)) {&#10;                    FirebaseAuth.getInstance().signOut()&#10;                    isAuthenticated = false&#10;                }&#10;            }&#10;            MaterialTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    NavHost(&#10;                        navController = navController,&#10;                        startDestination = if (!isAuthenticated) &quot;auth&quot; else &quot;main&quot;&#10;                    ) {&#10;                        composable(&quot;auth&quot;) {&#10;                            AuthScreen(&#10;                                onAuthSuccess = {&#10;                                    val user = FirebaseAuth.getInstance().currentUser&#10;                                    if (user != null &amp;&amp; !user.isEmailVerified) {&#10;                                        navController.navigate(&quot;verify&quot;) {&#10;                                            popUpTo(&quot;auth&quot;) { inclusive = true }&#10;                                        }&#10;                                    } else {&#10;                                        isAuthenticated = true&#10;                                        navController.navigate(&quot;main&quot;) {&#10;                                            popUpTo(&quot;auth&quot;) { inclusive = true }&#10;                                        }&#10;                                    }&#10;                                },&#10;                                viewModel = authViewModel,&#10;                                context = context&#10;                            )&#10;                        }&#10;                        composable(&quot;verify&quot;) {&#10;                            EmailVerificationScreen(&#10;                                onVerified = {&#10;                                    isAuthenticated = true&#10;                                    navController.navigate(&quot;main&quot;) {&#10;                                        popUpTo(&quot;verify&quot;) { inclusive = true }&#10;                                    }&#10;                                },&#10;                                onSignOut = {&#10;                                    FirebaseAuth.getInstance().signOut()&#10;                                    isAuthenticated = false&#10;                                    navController.navigate(&quot;auth&quot;) {&#10;                                        popUpTo(0) { inclusive = true }&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;                        composable(&quot;main&quot;) {&#10;                            MainContent(&#10;                                onNavigateToCoupleLink = {&#10;                                    navController.navigate(&quot;couple_link&quot;)&#10;                                },&#10;                                onSignOut = {&#10;                                    authViewModel.clearRememberMe(context)&#10;                                    FirebaseAuth.getInstance().signOut()&#10;                                    isAuthenticated = false&#10;                                    navController.navigate(&quot;auth&quot;) {&#10;                                        popUpTo(0) { inclusive = true }&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;                        composable(&quot;couple_link&quot;) {&#10;                            CoupleLinkScreen(&#10;                                onBack = { navController.popBackStack() }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.youme&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.viewModels&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.youme.ui.auth.AuthScreen&#10;import com.example.youme.ui.auth.AuthViewModel&#10;import com.example.youme.ui.couple.CoupleLinkScreen&#10;import com.example.youme.ui.auth.EmailVerificationScreen&#10;import com.google.firebase.auth.FirebaseAuth&#10;import androidx.compose.runtime.LaunchedEffect&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            val navController = rememberNavController()&#10;            val context = this&#10;            var isAuthenticated by remember {&#10;                mutableStateOf(FirebaseAuth.getInstance().currentUser != null)&#10;            }&#10;            val authViewModel: AuthViewModel by viewModels()&#10;            // On app start, sign out if not remembered&#10;            LaunchedEffect(Unit) {&#10;                if (isAuthenticated &amp;&amp; !authViewModel.checkRememberMe(context)) {&#10;                    FirebaseAuth.getInstance().signOut()&#10;                    isAuthenticated = false&#10;                }&#10;            }&#10;            MaterialTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    NavHost(&#10;                        navController = navController,&#10;                        startDestination = if (!isAuthenticated) &quot;auth&quot; else &quot;main&quot;&#10;                    ) {&#10;                        composable(&quot;auth&quot;) {&#10;                            AuthScreen(&#10;                                onAuthSuccess = {&#10;                                    val user = FirebaseAuth.getInstance().currentUser&#10;                                    if (user != null &amp;&amp; !user.isEmailVerified) {&#10;                                        navController.navigate(&quot;verify&quot;) {&#10;                                            popUpTo(&quot;auth&quot;) { inclusive = true }&#10;                                        }&#10;                                    } else {&#10;                                        isAuthenticated = true&#10;                                        navController.navigate(&quot;main&quot;) {&#10;                                            popUpTo(&quot;auth&quot;) { inclusive = true }&#10;                                        }&#10;                                    }&#10;                                },&#10;                                viewModel = authViewModel,&#10;                                context = context&#10;                            )&#10;                        }&#10;                        composable(&quot;verify&quot;) {&#10;                            EmailVerificationScreen(&#10;                                onVerified = {&#10;                                    isAuthenticated = true&#10;                                    navController.navigate(&quot;main&quot;) {&#10;                                        popUpTo(&quot;verify&quot;) { inclusive = true }&#10;                                    }&#10;                                },&#10;                                onSignOut = {&#10;                                    FirebaseAuth.getInstance().signOut()&#10;                                    isAuthenticated = false&#10;                                    navController.navigate(&quot;auth&quot;) {&#10;                                        popUpTo(0) { inclusive = true }&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;                        composable(&quot;main&quot;) {&#10;                            MainContent(&#10;                                onNavigateToCoupleLink = {&#10;                                    navController.navigate(&quot;couple_link&quot;)&#10;                                },&#10;                                onSignOut = {&#10;                                    authViewModel.clearRememberMe(context)&#10;                                    FirebaseAuth.getInstance().signOut()&#10;                                    isAuthenticated = false&#10;                                    navController.navigate(&quot;auth&quot;) {&#10;                                        popUpTo(0) { inclusive = true }&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;                        composable(&quot;couple_link&quot;) {&#10;                            CoupleLinkScreen(&#10;                                onBack = { navController.popBackStack() }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/YouMeApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/YouMeApplication.kt" />
              <option name="updatedContent" value="package com.example.youme&#10;&#10;import android.app.Application&#10;import com.google.firebase.FirebaseApp&#10;&#10;class YouMeApplication : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        FirebaseApp.initializeApp(this)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/data/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/data/User.kt" />
              <option name="originalContent" value="package com.example.youme.data&#10;&#10;data class User(&#10;    val id: String = &quot;&quot;,&#10;    val email: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.youme.data&#10;&#10;data class User(&#10;    val id: String = &quot;&quot;,&#10;    val email: String = &quot;&quot;,&#10;    val name: String = &quot;&quot;,&#10;    val displayName: String = &quot;&quot;,&#10;    val phoneNumber: String = &quot;&quot;,&#10;    val isEmailVerified: Boolean = false,&#10;    val profileCreatedAt: Long = System.currentTimeMillis()&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/auth/AuthScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/auth/AuthScreen.kt" />
              <option name="originalContent" value="package com.example.youme.ui.auth&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AuthScreen(&#10;    onAuthSuccess: () -&gt; Unit,&#10;    viewModel: AuthViewModel = viewModel(),&#10;    context: android.content.Context? = null&#10;) {&#10;    var isSignUp by remember { mutableStateOf(false) }&#10;    var showResetPassword by remember { mutableStateOf(false) }&#10;    var showDeleteConfirmation by remember { mutableStateOf(false) }&#10;    var showPasswordChangeDialog by remember { mutableStateOf(false) }&#10;    var showCoupleCodeDialog by remember { mutableStateOf(false) }&#10;    var showLinkCodeDialog by remember { mutableStateOf(false) }&#10;    var currentPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var coupleCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var coupleCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var rememberMe by remember { mutableStateOf(false) }&#10;    var emailInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var displayNameInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneNumberInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var newPasswordInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var showAccountSettings by remember { mutableStateOf(false) }&#10;    var showPasswordVisibility by remember { mutableStateOf(false) }  // Add this line&#10;    var showDeletePasswordVisibility by remember { mutableStateOf(false) }&#10;    var showCurrentPasswordVisibility by remember { mutableStateOf(false) }&#10;    var showNewPasswordVisibility by remember { mutableStateOf(false) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val scrollState = rememberScrollState()&#10;&#10;    LaunchedEffect(viewModel.authState) {&#10;        if (viewModel.authState is AuthState.Success) {&#10;            onAuthSuccess()&#10;        }&#10;    }&#10;&#10;    // Sync input fields with viewModel when screen changes&#10;    LaunchedEffect(isSignUp, showResetPassword) {&#10;        emailInput = viewModel.email&#10;        passwordInput = viewModel.password&#10;        displayNameInput = viewModel.displayName&#10;        phoneNumberInput = viewModel.phoneNumber&#10;        newPasswordInput = viewModel.newPassword&#10;    }&#10;&#10;    if (showDeleteConfirmation) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteConfirmation = false },&#10;            title = { Text(&quot;Delete Account&quot;) },&#10;            text = {&#10;                Column {&#10;                    Text(&quot;This action cannot be undone. Please enter your password to confirm.&quot;)&#10;                    OutlinedTextField(&#10;                        value = currentPassword,&#10;                        onValueChange = { currentPassword = it },&#10;                        label = { Text(&quot;Current Password&quot;) },&#10;                        visualTransformation = if (showDeletePasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        singleLine = true,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(top = 16.dp),&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { showDeletePasswordVisibility = !showDeletePasswordVisibility }) {&#10;                                Icon(&#10;                                    imageVector = if (showDeletePasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                    contentDescription = if (showDeletePasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.reauthenticateUser(currentPassword) {&#10;                            viewModel.deleteAccount()&#10;                            showDeleteConfirmation = false&#10;                            currentPassword = &quot;&quot;&#10;                        }&#10;                    }&#10;                ) {&#10;                    Text(&quot;Confirm Delete&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    showDeleteConfirmation = false&#10;                    currentPassword = &quot;&quot;&#10;                }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showPasswordChangeDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPasswordChangeDialog = false },&#10;            title = { Text(&quot;Change Password&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = currentPassword,&#10;                        onValueChange = { currentPassword = it },&#10;                        label = { Text(&quot;Current Password&quot;) },&#10;                        visualTransformation = if (showCurrentPasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        singleLine = true,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { showCurrentPasswordVisibility = !showCurrentPasswordVisibility }) {&#10;                                Icon(&#10;                                    imageVector = if (showCurrentPasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                    contentDescription = if (showCurrentPasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    OutlinedTextField(&#10;                        value = newPasswordInput,&#10;                        onValueChange = { newPasswordInput = it; viewModel.updateNewPassword(it) },&#10;                        label = { Text(&quot;New Password&quot;) },&#10;                        visualTransformation = if (showNewPasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        singleLine = true,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { showNewPasswordVisibility = !showNewPasswordVisibility }) {&#10;                                Icon(&#10;                                    imageVector = if (showNewPasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                    contentDescription = if (showNewPasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        coroutineScope.launch {&#10;                            viewModel.changePassword(&#10;                                currentPassword,&#10;                                newPasswordInput&#10;                            ) { _, _ -&gt;  // Rename parameters to _ since they're unused&#10;                                // Optionally show a message to the user&#10;                                showPasswordChangeDialog = false&#10;                                currentPassword = &quot;&quot;&#10;                                viewModel.updateNewPassword(&quot;&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                ) {&#10;                    Text(&quot;Change Password&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    showPasswordChangeDialog = false&#10;                    currentPassword = &quot;&quot;&#10;                }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(scrollState),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        AnimatedVisibility(&#10;            visible = !showResetPassword,&#10;            enter = fadeIn() + slideInVertically(),&#10;            exit = fadeOut() + slideOutVertically()&#10;        ) {&#10;            Text(&#10;                text = if (isSignUp) &quot;Create Account&quot; else &quot;Sign In&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = showResetPassword,&#10;            enter = fadeIn() + slideInVertically(),&#10;            exit = fadeOut() + slideOutVertically()&#10;        ) {&#10;            Text(&#10;                text = &quot;Reset Password&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        OutlinedTextField(&#10;            value = emailInput,&#10;            onValueChange = {&#10;                emailInput = it&#10;                viewModel.updateEmail(it)&#10;            },&#10;            label = { Text(&quot;Email&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)&#10;        ) {&#10;            Checkbox(&#10;                checked = rememberMe,&#10;                onCheckedChange = { rememberMe = it }&#10;            )&#10;            Text(&quot;Remember Me&quot;, modifier = Modifier.padding(start = 4.dp))&#10;        }&#10;&#10;        AnimatedVisibility(visible = !showResetPassword) {&#10;            Column {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = passwordInput,&#10;                    onValueChange = {&#10;                        passwordInput = it&#10;                        viewModel.updatePassword(it)&#10;                    },&#10;                    label = { Text(&quot;Password&quot;) },&#10;                    visualTransformation = if (showPasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    singleLine = true,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { showPasswordVisibility = !showPasswordVisibility }) {&#10;                            Icon(&#10;                                imageVector = if (showPasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (showPasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                )&#10;&#10;                AnimatedVisibility(visible = isSignUp) {&#10;                    Column {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        OutlinedTextField(&#10;                            value = displayNameInput,&#10;                            onValueChange = {&#10;                                displayNameInput = it&#10;                                viewModel.updateDisplayName(it)&#10;                            },&#10;                            label = { Text(&quot;Display Name&quot;) },&#10;                            singleLine = true,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        OutlinedTextField(&#10;                            value = phoneNumberInput,&#10;                            onValueChange = {&#10;                                phoneNumberInput = it&#10;                                viewModel.updatePhoneNumber(it)&#10;                            },&#10;                            label = { Text(&quot;Phone Number (Optional)&quot;) },&#10;                            singleLine = true,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        when {&#10;            showResetPassword -&gt; {&#10;                Button(&#10;                    onClick = { viewModel.resetPassword() },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Send Reset Link&quot;)&#10;                }&#10;            }&#10;            else -&gt; {&#10;                Button(&#10;                    onClick = { if (isSignUp) viewModel.signUp() else viewModel.signIn(rememberMe, context) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(if (isSignUp) &quot;Sign Up&quot; else &quot;Sign In&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            TextButton(&#10;                onClick = {&#10;                    if (showResetPassword) {&#10;                        showResetPassword = false&#10;                    } else {&#10;                        isSignUp = !isSignUp&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&#10;                    if (showResetPassword) &quot;Back to Sign In&quot;&#10;                    else if (isSignUp) &quot;Already have an account?&quot;&#10;                    else &quot;Need an account?&quot;&#10;                )&#10;            }&#10;&#10;            AnimatedVisibility(visible = !isSignUp &amp;&amp; !showResetPassword) {&#10;                TextButton(onClick = { showResetPassword = true }) {&#10;                    Text(&quot;Forgot Password?&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = viewModel.authState is AuthState.Success,&#10;            enter = fadeIn() + expandVertically(),&#10;            exit = fadeOut() + shrinkVertically()&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 32.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;Account Settings&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                OutlinedButton(&#10;                    onClick = { showPasswordChangeDialog = true },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Change Password&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedButton(&#10;                    onClick = {&#10;                        coupleCodeMessage = &quot;&quot;&#10;                        coupleCode = &quot;&quot;&#10;                        showCoupleCodeDialog = true&#10;                        coroutineScope.launch {&#10;                            viewModel.generateCoupleCode { success, codeOrMsg -&gt;&#10;                                if (success) {&#10;                                    coupleCode = codeOrMsg&#10;                                } else {&#10;                                    coupleCodeMessage = codeOrMsg&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Generate Couple Code&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedButton(&#10;                    onClick = {&#10;                        linkCode = &quot;&quot;&#10;                        linkCodeMessage = &quot;&quot;&#10;                        showLinkCodeDialog = true&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Link with Partner's Code&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Button(&#10;                    onClick = { showDeleteConfirmation = true },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Delete Account&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { viewModel.signOut() },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                ) {&#10;                    Text(&quot;Sign Out&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Add a button to toggle account settings&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            TextButton(onClick = { showAccountSettings = !showAccountSettings }) {&#10;                Text(if (showAccountSettings) &quot;Hide Account Settings&quot; else &quot;Show Account Settings&quot;)&#10;            }&#10;        }&#10;        AnimatedVisibility(visible = showAccountSettings) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 16.dp)&#10;            ) {&#10;                Text(&quot;Account Settings&quot;, style = MaterialTheme.typography.titleMedium)&#10;                // You can add more account settings UI here&#10;            }&#10;        }&#10;&#10;        if (viewModel.authState is AuthState.Loading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .size(48.dp)&#10;            )&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = viewModel.authState is AuthState.Error ||&#10;                     viewModel.authState is AuthState.Success,&#10;            enter = fadeIn() + expandVertically(),&#10;            exit = fadeOut() + shrinkVertically()&#10;        ) {&#10;            val message = when (val state = viewModel.authState) {&#10;                is AuthState.Error -&gt; state.message&#10;                is AuthState.Success -&gt; state.message&#10;                else -&gt; &quot;&quot;&#10;            }&#10;            val isError = viewModel.authState is AuthState.Error&#10;&#10;            Surface(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(8.dp),&#10;                color = if (isError)&#10;                    MaterialTheme.colorScheme.errorContainer&#10;                else&#10;                    MaterialTheme.colorScheme.primaryContainer,&#10;                shape = MaterialTheme.shapes.medium&#10;            ) {&#10;                Text(&#10;                    text = message,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = if (isError)&#10;                        MaterialTheme.colorScheme.onErrorContainer&#10;                    else&#10;                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showCoupleCodeDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showCoupleCodeDialog = false },&#10;            title = { Text(&quot;Your Couple Code&quot;) },&#10;            text = {&#10;                if (coupleCode.isNotEmpty()) {&#10;                    Column {&#10;                        Text(&quot;Share this code with your partner:&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(coupleCode, style = MaterialTheme.typography.headlineLarge)&#10;                    }&#10;                } else {&#10;                    Text(coupleCodeMessage.ifEmpty { &quot;Generating code...&quot; })&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = { showCoupleCodeDialog = false }) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showLinkCodeDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showLinkCodeDialog = false },&#10;            title = { Text(&quot;Link with Partner&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = linkCode,&#10;                        onValueChange = { linkCode = it.filter { c -&gt; c.isDigit() }.take(6) },&#10;                        label = { Text(&quot;Enter 6-digit Code&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    if (linkCodeMessage.isNotEmpty()) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(linkCodeMessage, color = MaterialTheme.colorScheme.error)&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        if (linkCode.length == 6) {&#10;                            coroutineScope.launch {&#10;                                viewModel.linkWithCoupleCode(linkCode) { success, msg -&gt;&#10;                                    linkCodeMessage = msg&#10;                                    if (success) {&#10;                                        showLinkCodeDialog = false&#10;                                    }&#10;                                }&#10;                            }&#10;                        } else {&#10;                            linkCodeMessage = &quot;Please enter a valid 6-digit code.&quot;&#10;                        }&#10;                    }&#10;                ) {&#10;                    Text(&quot;Link&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showLinkCodeDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.youme.ui.auth&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AuthScreen(&#10;    onAuthSuccess: () -&gt; Unit,&#10;    viewModel: AuthViewModel = viewModel(),&#10;    context: android.content.Context? = null&#10;) {&#10;    var isSignUp by remember { mutableStateOf(false) }&#10;    var showResetPassword by remember { mutableStateOf(false) }&#10;    var showDeleteConfirmation by remember { mutableStateOf(false) }&#10;    var showPasswordChangeDialog by remember { mutableStateOf(false) }&#10;    var showCoupleCodeDialog by remember { mutableStateOf(false) }&#10;    var showLinkCodeDialog by remember { mutableStateOf(false) }&#10;    var currentPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var coupleCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var coupleCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var rememberMe by remember { mutableStateOf(false) }&#10;    var emailInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var displayNameInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var phoneNumberInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var newPasswordInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var showAccountSettings by remember { mutableStateOf(false) }&#10;    var showPasswordVisibility by remember { mutableStateOf(false) }  // Add this line&#10;    var showDeletePasswordVisibility by remember { mutableStateOf(false) }&#10;    var showCurrentPasswordVisibility by remember { mutableStateOf(false) }&#10;    var showNewPasswordVisibility by remember { mutableStateOf(false) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val scrollState = rememberScrollState()&#10;&#10;    LaunchedEffect(viewModel.authState) {&#10;        if (viewModel.authState is AuthState.Success) {&#10;            onAuthSuccess()&#10;        }&#10;    }&#10;&#10;    // Sync input fields with viewModel when screen changes&#10;    LaunchedEffect(isSignUp, showResetPassword) {&#10;        emailInput = viewModel.email&#10;        passwordInput = viewModel.password&#10;        displayNameInput = viewModel.displayName&#10;        phoneNumberInput = viewModel.phoneNumber&#10;        newPasswordInput = viewModel.newPassword&#10;    }&#10;&#10;    if (showDeleteConfirmation) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteConfirmation = false },&#10;            title = { Text(&quot;Delete Account&quot;) },&#10;            text = {&#10;                Column {&#10;                    Text(&quot;This action cannot be undone. Please enter your password to confirm.&quot;)&#10;                    OutlinedTextField(&#10;                        value = currentPassword,&#10;                        onValueChange = { currentPassword = it },&#10;                        label = { Text(&quot;Current Password&quot;) },&#10;                        visualTransformation = if (showDeletePasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        singleLine = true,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(top = 16.dp),&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { showDeletePasswordVisibility = !showDeletePasswordVisibility }) {&#10;                                Icon(&#10;                                    imageVector = if (showDeletePasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                    contentDescription = if (showDeletePasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.reauthenticateUser(currentPassword) {&#10;                            viewModel.deleteAccount()&#10;                            showDeleteConfirmation = false&#10;                            currentPassword = &quot;&quot;&#10;                        }&#10;                    }&#10;                ) {&#10;                    Text(&quot;Confirm Delete&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    showDeleteConfirmation = false&#10;                    currentPassword = &quot;&quot;&#10;                }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showPasswordChangeDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPasswordChangeDialog = false },&#10;            title = { Text(&quot;Change Password&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = currentPassword,&#10;                        onValueChange = { currentPassword = it },&#10;                        label = { Text(&quot;Current Password&quot;) },&#10;                        visualTransformation = if (showCurrentPasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        singleLine = true,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { showCurrentPasswordVisibility = !showCurrentPasswordVisibility }) {&#10;                                Icon(&#10;                                    imageVector = if (showCurrentPasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                    contentDescription = if (showCurrentPasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    OutlinedTextField(&#10;                        value = newPasswordInput,&#10;                        onValueChange = { newPasswordInput = it; viewModel.updateNewPassword(it) },&#10;                        label = { Text(&quot;New Password&quot;) },&#10;                        visualTransformation = if (showNewPasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        singleLine = true,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { showNewPasswordVisibility = !showNewPasswordVisibility }) {&#10;                                Icon(&#10;                                    imageVector = if (showNewPasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                    contentDescription = if (showNewPasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        coroutineScope.launch {&#10;                            viewModel.changePassword(&#10;                                currentPassword,&#10;                                newPasswordInput&#10;                            ) { _, _ -&gt;  // Rename parameters to _ since they're unused&#10;                                // Optionally show a message to the user&#10;                                showPasswordChangeDialog = false&#10;                                currentPassword = &quot;&quot;&#10;                                viewModel.updateNewPassword(&quot;&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                ) {&#10;                    Text(&quot;Change Password&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    showPasswordChangeDialog = false&#10;                    currentPassword = &quot;&quot;&#10;                }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(scrollState),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        AnimatedVisibility(&#10;            visible = !showResetPassword,&#10;            enter = fadeIn() + slideInVertically(),&#10;            exit = fadeOut() + slideOutVertically()&#10;        ) {&#10;            Text(&#10;                text = if (isSignUp) &quot;Create Account&quot; else &quot;Sign In&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = showResetPassword,&#10;            enter = fadeIn() + slideInVertically(),&#10;            exit = fadeOut() + slideOutVertically()&#10;        ) {&#10;            Text(&#10;                text = &quot;Reset Password&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        OutlinedTextField(&#10;            value = emailInput,&#10;            onValueChange = {&#10;                emailInput = it&#10;                viewModel.updateEmail(it)&#10;            },&#10;            label = { Text(&quot;Email&quot;) },&#10;            singleLine = true,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        AnimatedVisibility(visible = !showResetPassword) {&#10;            Column {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = passwordInput,&#10;                    onValueChange = {&#10;                        passwordInput = it&#10;                        viewModel.updatePassword(it)&#10;                    },&#10;                    label = { Text(&quot;Password&quot;) },&#10;                    visualTransformation = if (showPasswordVisibility) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    singleLine = true,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { showPasswordVisibility = !showPasswordVisibility }) {&#10;                            Icon(&#10;                                imageVector = if (showPasswordVisibility) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (showPasswordVisibility) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                )&#10;                // Add Remember Me below password, only for sign-in&#10;                if (!isSignUp) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)&#10;                    ) {&#10;                        Checkbox(&#10;                            checked = rememberMe,&#10;                            onCheckedChange = { rememberMe = it }&#10;                        )&#10;                        Text(&quot;Remember Me&quot;, modifier = Modifier.padding(start = 4.dp))&#10;                    }&#10;                }&#10;&#10;                AnimatedVisibility(visible = isSignUp) {&#10;                    Column {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        OutlinedTextField(&#10;                            value = displayNameInput,&#10;                            onValueChange = {&#10;                                displayNameInput = it&#10;                                viewModel.updateDisplayName(it)&#10;                            },&#10;                            label = { Text(&quot;Display Name&quot;) },&#10;                            singleLine = true,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        OutlinedTextField(&#10;                            value = phoneNumberInput,&#10;                            onValueChange = {&#10;                                phoneNumberInput = it&#10;                                viewModel.updatePhoneNumber(it)&#10;                            },&#10;                            label = { Text(&quot;Phone Number (Optional)&quot;) },&#10;                            singleLine = true,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        when {&#10;            showResetPassword -&gt; {&#10;                Button(&#10;                    onClick = { viewModel.resetPassword() },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Send Reset Link&quot;)&#10;                }&#10;            }&#10;            else -&gt; {&#10;                Button(&#10;                    onClick = { if (isSignUp) viewModel.signUp() else viewModel.signIn(rememberMe, context) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(if (isSignUp) &quot;Sign Up&quot; else &quot;Sign In&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            TextButton(&#10;                onClick = {&#10;                    if (showResetPassword) {&#10;                        showResetPassword = false&#10;                    } else {&#10;                        isSignUp = !isSignUp&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&#10;                    if (showResetPassword) &quot;Back to Sign In&quot;&#10;                    else if (isSignUp) &quot;Already have an account?&quot;&#10;                    else &quot;Need an account?&quot;&#10;                )&#10;            }&#10;&#10;            AnimatedVisibility(visible = !isSignUp &amp;&amp; !showResetPassword) {&#10;                TextButton(onClick = { showResetPassword = true }) {&#10;                    Text(&quot;Forgot Password?&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = viewModel.authState is AuthState.Success,&#10;            enter = fadeIn() + expandVertically(),&#10;            exit = fadeOut() + shrinkVertically()&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 32.dp)&#10;            ) {&#10;                Text(&#10;                    &quot;Account Settings&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                OutlinedButton(&#10;                    onClick = { showPasswordChangeDialog = true },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Change Password&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedButton(&#10;                    onClick = {&#10;                        coupleCodeMessage = &quot;&quot;&#10;                        coupleCode = &quot;&quot;&#10;                        showCoupleCodeDialog = true&#10;                        coroutineScope.launch {&#10;                            viewModel.generateCoupleCode { success, codeOrMsg -&gt;&#10;                                if (success) {&#10;                                    coupleCode = codeOrMsg&#10;                                } else {&#10;                                    coupleCodeMessage = codeOrMsg&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Generate Couple Code&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedButton(&#10;                    onClick = {&#10;                        linkCode = &quot;&quot;&#10;                        linkCodeMessage = &quot;&quot;&#10;                        showLinkCodeDialog = true&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Link with Partner's Code&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Button(&#10;                    onClick = { showDeleteConfirmation = true },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Delete Account&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = { viewModel.signOut() },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                ) {&#10;                    Text(&quot;Sign Out&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Add a button to toggle account settings&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            TextButton(onClick = { showAccountSettings = !showAccountSettings }) {&#10;                Text(if (showAccountSettings) &quot;Hide Account Settings&quot; else &quot;Show Account Settings&quot;)&#10;            }&#10;        }&#10;        AnimatedVisibility(visible = showAccountSettings) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 16.dp)&#10;            ) {&#10;                Text(&quot;Account Settings&quot;, style = MaterialTheme.typography.titleMedium)&#10;                // You can add more account settings UI here&#10;            }&#10;        }&#10;&#10;        if (viewModel.authState is AuthState.Loading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier&#10;                    .padding(16.dp)&#10;                    .size(48.dp)&#10;            )&#10;        }&#10;&#10;        AnimatedVisibility(&#10;            visible = viewModel.authState is AuthState.Error ||&#10;                     viewModel.authState is AuthState.Success,&#10;            enter = fadeIn() + expandVertically(),&#10;            exit = fadeOut() + shrinkVertically()&#10;        ) {&#10;            val message = when (val state = viewModel.authState) {&#10;                is AuthState.Error -&gt; state.message&#10;                is AuthState.Success -&gt; state.message&#10;                else -&gt; &quot;&quot;&#10;            }&#10;            val isError = viewModel.authState is AuthState.Error&#10;&#10;            Surface(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(8.dp),&#10;                color = if (isError)&#10;                    MaterialTheme.colorScheme.errorContainer&#10;                else&#10;                    MaterialTheme.colorScheme.primaryContainer,&#10;                shape = MaterialTheme.shapes.medium&#10;            ) {&#10;                Text(&#10;                    text = message,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = if (isError)&#10;                        MaterialTheme.colorScheme.onErrorContainer&#10;                    else&#10;                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showCoupleCodeDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showCoupleCodeDialog = false },&#10;            title = { Text(&quot;Your Couple Code&quot;) },&#10;            text = {&#10;                if (coupleCode.isNotEmpty()) {&#10;                    Column {&#10;                        Text(&quot;Share this code with your partner:&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(coupleCode, style = MaterialTheme.typography.headlineLarge)&#10;                    }&#10;                } else {&#10;                    Text(coupleCodeMessage.ifEmpty { &quot;Generating code...&quot; })&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(onClick = { showCoupleCodeDialog = false }) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showLinkCodeDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showLinkCodeDialog = false },&#10;            title = { Text(&quot;Link with Partner&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = linkCode,&#10;                        onValueChange = { linkCode = it.filter { c -&gt; c.isDigit() }.take(6) },&#10;                        label = { Text(&quot;Enter 6-digit Code&quot;) },&#10;                        singleLine = true,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    if (linkCodeMessage.isNotEmpty()) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(linkCodeMessage, color = MaterialTheme.colorScheme.error)&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        if (linkCode.length == 6) {&#10;                            coroutineScope.launch {&#10;                                viewModel.linkWithCoupleCode(linkCode) { success, msg -&gt;&#10;                                    linkCodeMessage = msg&#10;                                    if (success) {&#10;                                        showLinkCodeDialog = false&#10;                                    }&#10;                                }&#10;                            }&#10;                        } else {&#10;                            linkCodeMessage = &quot;Please enter a valid 6-digit code.&quot;&#10;                        }&#10;                    }&#10;                ) {&#10;                    Text(&quot;Link&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showLinkCodeDialog = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/couple/CoupleLinkScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/couple/CoupleLinkScreen.kt" />
              <option name="originalContent" value="package com.example.youme.ui.couple&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.youme.ui.auth.AuthViewModel&#10;&#10;@Composable&#10;fun CoupleLinkScreen(&#10;    authViewModel: AuthViewModel = viewModel(),&#10;    onBack: () -&gt; Unit = {},&#10;) {&#10;    var coupleCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var coupleCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLinked by remember { mutableStateOf(false) }&#10;    var partnerId by remember { mutableStateOf(&quot;&quot;) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var linkLoading by remember { mutableStateOf(false) }&#10;    var codeLoading by remember { mutableStateOf(false) }&#10;    var linkSuccess by remember { mutableStateOf(false) }&#10;&#10;    // Check if already linked&#10;    LaunchedEffect(Unit) {&#10;        coroutineScope.launch {&#10;            isLinked = authViewModel.isUserLinked()&#10;        }&#10;    }&#10;&#10;    // Fetch partner info if linked&#10;    LaunchedEffect(isLinked) {&#10;        if (isLinked) {&#10;            coroutineScope.launch {&#10;                authViewModel.fetchPartnerInfo()&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;Couple Linking&quot;, style = MaterialTheme.typography.titleLarge)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        if (isLinked) {&#10;            Text(&quot;You are linked!&quot;, color = MaterialTheme.colorScheme.primary)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&quot;Partner ID: $partnerId&quot;)&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(onClick = {&#10;                coroutineScope.launch {&#10;                    codeLoading = true&#10;                    authViewModel.unlinkPartner { result, msg -&gt;&#10;                        codeLoading = false&#10;                        isLinked = result&#10;                        coupleCodeMessage = msg&#10;                    }&#10;                }&#10;            }, enabled = !codeLoading) {&#10;                Text(&quot;Unlink Couple&quot;)&#10;            }&#10;            if (coupleCodeMessage.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(coupleCodeMessage, color = MaterialTheme.colorScheme.error)&#10;            }&#10;        } else {&#10;            // Show the generated code as text, not in an input field&#10;            if (coupleCode.isNotEmpty()) {&#10;                Text(&quot;Your Couple Code: $coupleCode&quot;, style = MaterialTheme.typography.bodyLarge)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;            Button(onClick = {&#10;                coroutineScope.launch {&#10;                    codeLoading = true&#10;                    authViewModel.generateCoupleCode { success, codeOrMsg -&gt;&#10;                        coupleCode = if (success) codeOrMsg else &quot;&quot;&#10;                        coupleCodeMessage = if (success) &quot;Share this code with your partner.&quot; else codeOrMsg&#10;                        codeLoading = false&#10;                    }&#10;                }&#10;            }, enabled = !codeLoading) {&#10;                Text(&quot;Generate Couple Code&quot;)&#10;            }&#10;            if (coupleCodeMessage.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(coupleCodeMessage, color = MaterialTheme.colorScheme.primary)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            OutlinedTextField(&#10;                value = linkCode,&#10;                onValueChange = { linkCode = it },&#10;                label = { Text(&quot;Enter Partner's Code&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Button(onClick = {&#10;                coroutineScope.launch {&#10;                    linkLoading = true&#10;                    authViewModel.linkWithCoupleCode(linkCode) { success, msg -&gt;&#10;                        linkSuccess = success&#10;                        isLinked = success&#10;                        linkCodeMessage = msg&#10;                        linkLoading = false&#10;                    }&#10;                }&#10;            }, enabled = !linkLoading) {&#10;                Text(&quot;Link Couple&quot;)&#10;            }&#10;            if (linkCodeMessage.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(linkCodeMessage, color = if (linkSuccess) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error)&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;        Button(onClick = onBack) {&#10;            Text(&quot;Back&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.youme.ui.couple&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.youme.ui.auth.AuthViewModel&#10;&#10;@Composable&#10;fun CoupleLinkScreen(&#10;    authViewModel: AuthViewModel = viewModel(),&#10;    onBack: () -&gt; Unit = {},&#10;) {&#10;    var coupleCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var coupleCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCode by remember { mutableStateOf(&quot;&quot;) }&#10;    var linkCodeMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    var isLinked by remember { mutableStateOf(false) }&#10;    var partnerId by remember { mutableStateOf(&quot;&quot;) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var linkLoading by remember { mutableStateOf(false) }&#10;    var codeLoading by remember { mutableStateOf(false) }&#10;    var linkSuccess by remember { mutableStateOf(false) }&#10;&#10;    // Check if already linked&#10;    LaunchedEffect(Unit) {&#10;        coroutineScope.launch {&#10;            isLinked = authViewModel.isUserLinked()&#10;        }&#10;    }&#10;&#10;    // Fetch partner info if linked&#10;    LaunchedEffect(isLinked) {&#10;        if (isLinked) {&#10;            coroutineScope.launch {&#10;                authViewModel.fetchPartnerInfo()&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;Couple Linking&quot;, style = MaterialTheme.typography.titleLarge)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        if (isLinked) {&#10;            Text(&quot;You are linked!&quot;, color = MaterialTheme.colorScheme.primary)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&quot;Partner ID: $partnerId&quot;)&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(onClick = {&#10;                coroutineScope.launch {&#10;                    codeLoading = true&#10;                    authViewModel.unlinkPartner { result, msg -&gt;&#10;                        codeLoading = false&#10;                        isLinked = result&#10;                        coupleCodeMessage = msg&#10;                    }&#10;                }&#10;            }, enabled = !codeLoading) {&#10;                Text(&quot;Unlink Couple&quot;)&#10;            }&#10;            if (coupleCodeMessage.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(coupleCodeMessage, color = MaterialTheme.colorScheme.error)&#10;            }&#10;        } else {&#10;            // Show the generated code as text, not in an input field&#10;            if (coupleCode.isNotEmpty()) {&#10;                Text(&quot;Your Couple Code: $coupleCode&quot;, style = MaterialTheme.typography.bodyLarge)&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;            Button(onClick = {&#10;                coroutineScope.launch {&#10;                    codeLoading = true&#10;                    authViewModel.generateCoupleCode { success, codeOrMsg -&gt;&#10;                        coupleCode = if (success) codeOrMsg else &quot;&quot;&#10;                        coupleCodeMessage = if (success) &quot;Share this code with your partner.&quot; else codeOrMsg&#10;                        codeLoading = false&#10;                    }&#10;                }&#10;            }, enabled = !codeLoading) {&#10;                Text(&quot;Generate Couple Code&quot;)&#10;            }&#10;            if (coupleCodeMessage.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(coupleCodeMessage, color = MaterialTheme.colorScheme.primary)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            OutlinedTextField(&#10;                value = linkCode,&#10;                onValueChange = { linkCode = it },&#10;                label = { Text(&quot;Enter Partner's Code&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Button(onClick = {&#10;                coroutineScope.launch {&#10;                    linkLoading = true&#10;                    authViewModel.linkWithCoupleCode(linkCode) { success, msg -&gt;&#10;                        linkSuccess = success&#10;                        isLinked = success&#10;                        linkCodeMessage = msg&#10;                        linkLoading = false&#10;                    }&#10;                }&#10;            }, enabled = !linkLoading) {&#10;                Text(&quot;Link Couple&quot;)&#10;            }&#10;            if (linkCodeMessage.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(linkCodeMessage, color = if (linkSuccess) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error)&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;        Button(onClick = onBack) {&#10;            Text(&quot;Back&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/profile/ChangePasswordScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/profile/ChangePasswordScreen.kt" />
              <option name="updatedContent" value="package com.example.youme.ui.profile&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import com.example.youme.ui.auth.AuthViewModel&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun ChangePasswordScreen(authViewModel: AuthViewModel = viewModel(), onPasswordChanged: () -&gt; Unit = {}) {&#13;&#10;    var currentPassword by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var newPassword by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var message by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var loading by remember { mutableStateOf(false) }&#13;&#10;    val scope = rememberCoroutineScope()&#13;&#10;&#13;&#10;    Column(modifier = Modifier.padding(16.dp)) {&#13;&#10;        Text(&quot;Change Password&quot;, style = MaterialTheme.typography.titleLarge)&#13;&#10;        Spacer(modifier = Modifier.height(16.dp))&#13;&#10;        OutlinedTextField(&#13;&#10;            value = currentPassword,&#13;&#10;            onValueChange = { currentPassword = it },&#13;&#10;            label = { Text(&quot;Current Password&quot;) },&#13;&#10;            visualTransformation = PasswordVisualTransformation(),&#13;&#10;            modifier = Modifier.fillMaxWidth()&#13;&#10;        )&#13;&#10;        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;        OutlinedTextField(&#13;&#10;            value = newPassword,&#13;&#10;            onValueChange = { newPassword = it },&#13;&#10;            label = { Text(&quot;New Password&quot;) },&#13;&#10;            visualTransformation = PasswordVisualTransformation(),&#13;&#10;            modifier = Modifier.fillMaxWidth()&#13;&#10;        )&#13;&#10;        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;        OutlinedTextField(&#13;&#10;            value = confirmPassword,&#13;&#10;            onValueChange = { confirmPassword = it },&#13;&#10;            label = { Text(&quot;Confirm Password&quot;) },&#13;&#10;            visualTransformation = PasswordVisualTransformation(),&#13;&#10;            modifier = Modifier.fillMaxWidth()&#13;&#10;        )&#13;&#10;        Spacer(modifier = Modifier.height(16.dp))&#13;&#10;        Button(&#13;&#10;            onClick = {&#13;&#10;                loading = true&#13;&#10;                scope.launch {&#13;&#10;                    if (newPassword != confirmPassword) {&#13;&#10;                        message = &quot;Passwords do not match.&quot;&#13;&#10;                        loading = false&#13;&#10;                        return@launch&#13;&#10;                    }&#13;&#10;                    authViewModel.changePassword(currentPassword, newPassword) { success, msg -&gt;&#13;&#10;                        loading = false&#13;&#10;                        message = msg&#13;&#10;                        if (success) onPasswordChanged()&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            },&#13;&#10;            enabled = !loading,&#13;&#10;            modifier = Modifier.fillMaxWidth()&#13;&#10;        ) {&#13;&#10;            Text(&quot;Change Password&quot;)&#13;&#10;        }&#13;&#10;        if (message.isNotEmpty()) {&#13;&#10;            Spacer(modifier = Modifier.height(8.dp))&#13;&#10;            Text(message, color = MaterialTheme.colorScheme.primary)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/profile/UpdateProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/youme/ui/profile/UpdateProfileScreen.kt" />
              <option name="updatedContent" value="package com.example.youme.ui.profile&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;import com.example.youme.ui.auth.AuthViewModel&#10;&#10;@Composable&#10;fun UpdateProfileScreen(authViewModel: AuthViewModel = viewModel(), onProfileUpdated: () -&gt; Unit = {}) {&#10;    var displayName by remember { mutableStateOf(authViewModel.displayName) }&#10;    var message by remember { mutableStateOf(&quot;&quot;) }&#10;    var loading by remember { mutableStateOf(false) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Column(modifier = Modifier.padding(16.dp)) {&#10;        Text(&quot;Update Profile&quot;, style = MaterialTheme.typography.titleLarge)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        OutlinedTextField(&#10;            value = displayName,&#10;            onValueChange = { displayName = it },&#10;            label = { Text(&quot;Display Name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Button(&#10;            onClick = {&#10;                loading = true&#10;                scope.launch {&#10;                    authViewModel.updateProfile(displayName) { success, msg -&gt;&#10;                        loading = false&#10;                        message = msg&#10;                        if (success) onProfileUpdated()&#10;                    }&#10;                }&#10;            },&#10;            enabled = !loading,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Text(&quot;Update&quot;)&#10;        }&#10;        if (message.isNotEmpty()) {&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(message, color = MaterialTheme.colorScheme.primary)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle.properties" />
              <option name="originalContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true" />
              <option name="updatedContent" value="# Project-wide Gradle settings.&#10;# IDE (e.g. Android Studio) users:&#10;# Gradle settings configured through the IDE *will override*&#10;# any settings specified in this file.&#10;# For more details on how to configure your build environment visit&#10;# http://www.gradle.org/docs/current/userguide/build_environment.html&#10;# Specifies the JVM arguments used for the daemon process.&#10;# The setting is particularly useful for tweaking memory settings.&#10;org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8&#10;# When configured, Gradle will run in incubating parallel mode.&#10;# This option should only be used with decoupled projects. For more details, visit&#10;# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects&#10;# org.gradle.parallel=true&#10;# AndroidX package structure to make it clearer which packages are bundled with the&#10;# Android operating system, and which are packaged with your app's APK&#10;# https://developer.android.com/topic/libraries/support-library/androidx-rn&#10;android.useAndroidX=true&#10;# Kotlin code style for this project: &quot;official&quot; or &quot;obsolete&quot;:&#10;kotlin.code.style=official&#10;# Enables namespacing of each library's R class so that its R class includes only the&#10;# resources declared in the library itself and none from the library's dependencies,&#10;# thereby reducing the size of the R class for that library&#10;android.nonTransitiveRClass=true&#10;android.suppressUnsupportedCompileSdk=35" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;You&amp;Me&quot;&#10;include(&quot;:app&quot;)&#10;" />
              <option name="updatedContent" value="pluginManagement {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;        maven(&quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;}&#10;&#10;rootProject.name = &quot;You&amp;Me&quot;&#10;include(&quot;:app&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>